/// <reference types="node" />
import { Velocity, ActuatorType, NodeVariation, PowerSaveMode, NodeOperatingState, ActuatorAlias } from "./KLF200-API/GW_SYSTEMTABLE_DATA";
import { GW_GET_NODE_INFORMATION_NTF } from "./KLF200-API/GW_GET_NODE_INFORMATION_NTF";
import { GW_GET_ALL_NODES_INFORMATION_NTF } from "./KLF200-API/GW_GET_ALL_NODES_INFORMATION_NTF";
import { Connection } from "./connection";
import { TypedEvent } from "./utils/TypedEvent";
import { PropertyChangedEvent } from "./utils/PropertyChangedEvent";
import { RunStatus, StatusReply } from "./KLF200-API/GW_COMMAND";
export declare class Product {
    readonly Connection: Connection;
    readonly propertyChangedEvent: TypedEvent<PropertyChangedEvent>;
    private _name;
    readonly NodeID: number;
    readonly TypeID: ActuatorType;
    readonly SubType: number;
    private _order;
    private _placement;
    readonly Velocity: Velocity;
    private _nodeVariation;
    readonly PowerSaveMode: PowerSaveMode;
    readonly SerialNumber: Buffer;
    readonly ProductType: number;
    private _state;
    private _currentPositionRaw;
    private _targetPositionRaw;
    private _fp1CurrentPositionRaw;
    private _fp2CurrentPositionRaw;
    private _fp3CurrentPositionRaw;
    private _fp4CurrentPositionRaw;
    private _remainingTime;
    private _timeStamp;
    readonly ProductAlias: ActuatorAlias[];
    private _runStatus;
    private _statusReply;
    constructor(Connection: Connection, frame: GW_GET_NODE_INFORMATION_NTF | GW_GET_ALL_NODES_INFORMATION_NTF);
    readonly Name: string;
    setNameAsync(newName: string): Promise<void>;
    readonly Category: string;
    readonly NodeVariation: NodeVariation;
    setNodeVariationAsync(newNodeVariation: NodeVariation): Promise<void>;
    setOrderAndPlacementAsync(newOrder: number, newPlacement: number): Promise<void>;
    readonly Order: number;
    setOrderAsync(newOrder: number): Promise<void>;
    readonly Placement: number;
    setPlacementAsync(newPlacement: number): Promise<void>;
    readonly State: NodeOperatingState;
    readonly CurrentPositionRaw: number;
    readonly TargetPositionRaw: number;
    readonly FP1CurrentPositionRaw: number;
    readonly FP2CurrentPositionRaw: number;
    readonly FP3CurrentPositionRaw: number;
    readonly FP4CurrentPositionRaw: number;
    readonly RemainingTime: number;
    readonly TimeStamp: Date;
    readonly RunStatus: RunStatus;
    readonly StatusReply: StatusReply;
    private convertPositionRaw;
    private convertPosition;
    readonly CurrentPosition: number;
    setTargetPositionAsync(newPosition: number): Promise<number>;
    readonly TargetPosition: number;
    stopAsync(): Promise<number>;
    winkAsync(): Promise<number>;
    protected propertyChanged(propertyName: keyof Product): void;
    private onNotificationHandler;
    private onNodeInformationChanged;
    private onNodeStatePositionChanged;
    private onRunStatus;
    private onRemainingTime;
}
export declare class Products {
    readonly Connection: Connection;
    readonly Products: (Product | undefined)[];
    private constructor();
    private initializeProductsAsync;
    private onNotificationHandler;
    private addNodeAsync;
    static createProductsAsync(Connection: Connection): Promise<Products>;
}
